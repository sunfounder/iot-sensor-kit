.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _iot_bluetooth_voice_control_relay:

Bluetooth Sprachgesteuertes Relais
=====================================

.. raw:: html

   <video controls style="max-width:100%">
      <source src="../_static/video/iot/14-iot_Bluetooth_voice_control_relay.mp4" type="video/mp4">
      Ihr Browser unterst√ºtzt das Video-Tag nicht.
   </video>

Dieses Projekt kombiniert eine Android-App, die mit dem MIT App Inventor entwickelt wurde, mit einem Arduino Uno Board. Die App bietet eine Spracheingabefunktion. Wenn die Spracheingabe des Benutzers das Wort "an" enth√§lt, sendet die App eine "1"-Nachricht √ºber Bluetooth an den Arduino, um das Relais einzuschalten. Enth√§lt die Spracheingabe hingegen das Wort "aus", wird eine "0"-Nachricht gesendet, die den Arduino anweist, das Relais auszuschalten. Nach Erhalt dieser Nachrichten verarbeitet der Arduino sie entsprechend und schaltet das Relais ein oder aus.

Die Android-Anwendung wird mithilfe einer kostenlosen webbasierten Plattform namens |link_appinventor| erstellt. Dieses Projekt bietet eine hervorragende M√∂glichkeit, sich mit der Schnittstelle zwischen einem Arduino und einem Smartphone vertraut zu machen.

1. Schaltung aufbauen
-----------------------------

.. warning ::
    Im folgenden Beispiel wird gezeigt, wie ein Relais zur Steuerung eines Verkehrslichtmoduls verwendet wird.
    **Sie k√∂nnen das Relais in realen Anwendungen auch mit anderen Ger√§ten verbinden. Dabei ist jedoch √§u√üerste Vorsicht im Umgang mit HOHER Wechselspannung geboten. Unsachgem√§√üe oder fehlerhafte Verwendung kann zu schweren Verletzungen oder gar zum Tod f√ºhren. Das Projekt ist daher nur f√ºr Personen geeignet, die sich mit HOHER Wechselspannung auskennen. Sicherheit hat immer Vorrang.**

.. image:: img/14-Wiring_Bluetooth_voice_control_relay.png
    :width: 75%

* :ref:`cpn_uno`
* :ref:`cpn_jdy31`
* :ref:`cpn_relay`
* :ref:`cpn_traffic`

2. Android-App erstellen
-----------------------------

Die Android-Anwendung wird mit einer kostenlosen Webanwendung namens |link_appinventor| entwickelt. 
Der MIT App Inventor dient als hervorragender Einstieg in die Android-Entwicklung dank seiner intuitiven Drag-and-Drop-Funktionen, die die Erstellung einfacher Anwendungen erm√∂glichen.

Jetzt geht's los.

#. √ñffnen Sie |link_appinventor_login| und klicken Sie auf "Online-Tool", um sich anzumelden. F√ºr die Registrierung bei MIT App Inventor ben√∂tigen Sie ein Google-Konto.

   .. image:: img/new/09-ai_signup_shadow.png
       :width: 90%
       :align: center

#. Nach dem Login navigieren Sie zu **Projects** -> **Import project (.aia) from my computer**. Laden Sie dann die ``VoiceControl.aia``-Datei hoch, die im Pfad ``ultimate-sensor-kit\iot_project\bluetooth\09-Bluetooth_voice_control_relay`` zu finden ist.

   Hier k√∂nnen Sie auch direkt herunterladen: :download:`VoiceControl.aia</_static/other/VoiceControl.aia>`

   .. image:: img/new/09-ai_import_shadow.png
        :align: center

#. Nach dem Hochladen der ``.aia``-Datei erscheint die Anwendung in der MIT App Inventor-Software. Dies ist eine vorkonfigurierte Vorlage, die Sie nach dem Kennenlernen des MIT App Inventors nach Ihren W√ºnschen anpassen k√∂nnen.

#. Im MIT App Inventor gibt es zwei Hauptbereiche: den **Designer** und die **Blocks**. Sie k√∂nnen oben rechts auf der Seite zwischen diesen beiden Bereichen wechseln.

   .. image:: img/new/09-ai_intro_1_shadow.png

#. Der **Designer** erm√∂glicht Ihnen, Schaltfl√§chen, Text, Bildschirme und das allgemeine Erscheinungsbild Ihrer Anwendung zu gestalten.

   .. image:: img/new/14-ai_intro_2_shadow.png

#. Als n√§chstes kommt der Bereich **Blocks**. Hier k√∂nnen Sie individuelle Funktionen f√ºr Ihre App erstellen und jedes Element auf der Benutzeroberfl√§che der App programmieren, um die gew√ºnschten Funktionen zu erreichen.

   .. image:: img/new/14-ai_intro_3_shadow.png

   In diesem Projekt verwenden wir Englisch als Beispiel f√ºr die Spracherkennung. Wenn Sie eine Erkennung in einer anderen Sprache w√ºnschen, m√ºssen Sie den unten stehenden Codeblock anpassen und die APK selbst kompilieren.

   Zun√§chst m√ºssen Sie ``SpeechRecognizer1.Language`` auf den **Sprachcode** der gew√ºnschten Sprache setzen. Sprachen werden durch einen Sprachcode mit einer optionalen Regionskennung angegeben, wie zum Beispiel ``en``, ``de`` oder ``ja``. Der Sprachcode kann unter |link_language_tag| gefunden werden.

   .. image:: img/new/14-ai_intro_3-1_shadow.png
      :width: 80%
      :align: center

   Danach m√ºssen Sie die entsprechende Bedingung anpassen. Der durch den Pfeil im folgenden Bild gekennzeichnete Teil.

   .. image:: img/new/14-ai_intro_3-2_shadow.png
      :width: 80%
      :align: center

#. Um die Anwendung auf einem Smartphone zu installieren, wechseln Sie zur Registerkarte **Buildn**.

   .. image:: img/new/08-ai_intro_4_shadow.png

   * Sie k√∂nnen eine ``.apk``-Datei generieren. Nachdem Sie diese Option ausgew√§hlt haben, erscheint eine Seite, auf der Sie zwischen dem Herunterladen einer ``.apk``-Datei oder dem Scannen eines QR-Codes f√ºr die Installation w√§hlen k√∂nnen. Befolgen Sie die Installationsanleitung, um die Installation der Anwendung abzuschlie√üen.

     Sie k√∂nnen auch unsere vorkompilierte APK hier herunterladen: :download:`VoiceControl.apk</_static/other/VoiceControl.apk>`

   * Wenn Sie diese App im Google Play Store oder einem anderen App-Marktplatz ver√∂ffentlichen m√∂chten, k√∂nnen Sie eine ``.aab``-Datei generieren.


3. Den Code hochladen
-----------------------------

#. √ñffnen Sie die Datei ``09-Bluetooth_voice_control_relay.ino`` im Verzeichnis ``ultimate-sensor-kit\iot_project\bluetooth\09-Bluetooth_voice_control_relay`` oder f√ºgen Sie den Code in die **Arduino IDE** ein.

   .. raw:: html
       
       <iframe src=https://create.arduino.cc/editor/sunfounder01/ab5f8fca-dd25-4e32-bf61-d5dc109bb6cd/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. W√§hlen Sie das passende Board und den entsprechenden Port aus und klicken Sie anschlie√üend auf die Schaltfl√§che **Hochladen**.

#. √ñffnen Sie den Seriellen Monitor und setzen Sie die Baudrate auf **9600**, um Debug-Meldungen einzusehen.

4. Verbindung der App mit dem Bluetooth-Modul
-----------------------------------------------

Stellen Sie sicher, dass die zuvor erstellte App auf Ihrem Smartphone installiert ist.

#. Aktivieren Sie zun√§chst **Bluetooth** auf Ihrem Smartphone.

   .. image:: img/new/09-app_1_shadow.png
      :width: 60%
      :align: center

#. Navigieren Sie zu den **Bluetooth-Einstellungen** auf Ihrem Smartphone und suchen Sie nach Ger√§tenamen wie **JDY-31-SPP**.

   .. image:: img/new/09-app_2_shadow.png
      :width: 60%
      :align: center

#. Nach dem Anklicken best√§tigen Sie die **Kopplungsanfrage** im aufpoppenden Fenster. Falls ein Kopplungscode erforderlich ist, geben Sie "1234" ein.

   .. image:: img/new/09-app_3_shadow.png
      :width: 60%
      :align: center

#. √ñffnen Sie nun die frisch installierte **Voice-Controlled Relay**-App.

   .. image:: img/new/14-app_4_shadow.png
      :width: 25%
      :align: center

#. In der App klicken Sie auf die Schaltfl√§che **Connect**, um die Verbindung zwischen der App und dem Bluetooth-Modul herzustellen.

   .. image:: img/new/14-app_5_shadow.png
      :width: 60%
      :align: center

#. Diese Seite zeigt eine Liste aller gekoppelten Bluetooth-Ger√§te. W√§hlen Sie die Option ``xx.xx.xx.xx.xx.xx JDY-31-SPP`` aus der Liste. Der Ger√§tename wird neben der jeweiligen MAC-Adresse angezeigt.

   .. image:: img/new/14-app_6_shadow.png
      :width: 60%
      :align: center

#. Sollten keine Ger√§te angezeigt werden, k√∂nnte dies daran liegen, dass der App die n√∂tigen Berechtigungen fehlen. In diesem Fall m√ºssen Sie die Einstellungen manuell anpassen.

   * Um zur Seite **App-Informationen** zu gelangen, halten Sie das App-Symbol gedr√ºckt und w√§hlen es aus.

   .. image:: img/new/14-app_8_shadow.png
         :width: 60%
         :align: center

   * Navigieren Sie zur **Berechtigungsseite**.

   .. image:: img/new/08-app_9_shadow.png
         :width: 60%
         :align: center

   * Aktivieren Sie unter **Nahegelegene Ger√§te** die Option **Immer**, damit die App nach Ger√§ten in der Umgebung suchen kann.

   .. image:: img/new/08-app_10_shadow.png
         :width: 60%
         :align: center

   * Starten Sie die App neu und wiederholen Sie die Schritte 5 und 6 f√ºr eine erfolgreiche Bluetooth-Verbindung.

#. Nach erfolgreicher Verbindung gelangen Sie zur Hauptseite. Dort k√∂nnen Sie das Relais √ºber die Schaltfl√§chen "ON" oder "OFF" steuern.

   .. image:: img/new/14-app_7_shadow.png
      :width: 60%
      :align: center

   Zwar k√∂nnen Sie das Relais auch mit kurzen Sprachbefehlen wie "on" oder "off" steuern, empfehlenswert sind jedoch vollst√§ndige S√§tze wie "turn on the light", um Fehlinterpretationen zu vermeiden.

   Die Spracherkennung basiert auf Googles Spracherkennungsmotor. Daher k√∂nnte es notwendig sein, |link_speech_recognition| im Voraus zu installieren. Bei den meisten Android-Smartphones ist diese Funktion jedoch bereits vorinstalliert.

   .. image:: img/new/14-app_7-1_shadow.png
      :width: 60%
      :align: center

5. Code-Erl√§uterung
-----------------------------------------------

1. Kommunikation mit dem Bluetooth-Modul einrichten

   .. code-block:: arduino
   
      #include <SoftwareSerial.h>
      const int bluetoothTx = 3;                           // bluetooth tx to 3 pin
      const int bluetoothRx = 4;                           // bluetooth rx to 4 pin
      SoftwareSerial bleSerial(bluetoothTx, bluetoothRx);  // Declare SoftwareSerial object for Bluetooth communication
   
   Dieser Abschnitt initialisiert die Bluetooth-Kommunikation mit Hilfe der SoftwareSerial-Bibliothek. Diese Bibliothek erm√∂glicht dem Arduino, einen zus√§tzlichen seriellen Port zu nutzen. Der "TX"-Pin des Bluetooth-Moduls ist mit Pin 3 und der "RX"-Pin mit Pin 4 des Arduino verbunden.

2. Variablen und Steuer-Pin f√ºr das Relais definieren

   .. code-block:: arduino
   
      char character;  // Character received from Bluetooth serial
      String message;  // Stores the complete message from Bluetooth
      const int relayPin = 8;
   
   In diesem Abschnitt deklarieren wir Variablen, um einzelne Zeichen (``character``) und die komplette Nachricht (``message``) vom Bluetooth zu speichern. Der ``relayPin`` wird auf Pin 8 initialisiert, der zur Steuerung des Relais verwendet wird.

3. Serielle Kommunikation initialisieren und den Modus des Relais-Pins festlegen

   .. code-block:: arduino
   
      void setup() {
        Serial.begin(9600);
        bleSerial.begin(9600);
        pinMode(relayPin, OUTPUT);
      }
   
   In der ``setup()``-Funktion initialisieren wir den Standard-Seriell-Port und den Bluetooth-Seriell-Port mit einer Baudrate von 9600. Zudem setzen wir den ``relayPin`` als Ausgang.

4. Bluetooth-Nachrichten lesen und das Relais steuern

   .. code-block:: arduino
   
      void loop() {
        while (bleSerial.available() > 0) {
          character = bleSerial.read();
          message = message + character;
          if (character == '#') {
            message = message.substring(0, message.length() - 1);
            Serial.println();
            Serial.print("DEBUG:");
            Serial.println(message);
            if (message == "1") {
              digitalWrite(relayPin, HIGH);
              Serial.println("On");
            } else if (message == "0") {
              digitalWrite(relayPin, LOW);
              Serial.println("Off");
            }
            message = "";
            delay(200);
          }
        }
      }

   Die ``loop()``-Funktion √ºberpr√ºft kontinuierlich auf eingehende Nachrichten von Bluetooth. Bei Erhalt einer Nachricht wird jedes Zeichen zur ``message``-Zeichenfolge hinzugef√ºgt. Sobald das Zeichen ``#`` erkannt wird, gilt die Nachricht als vollst√§ndig. Wir entfernen dann das ``#``, geben eine Debug-Nachricht aus und pr√ºfen den Inhalt. Wenn dieser "1" lautet, wird das Relais eingeschaltet; bei "0" wird es ausgeschaltet. Anschlie√üend wird die ``message``-Zeichenfolge geleert und kurz gewartet, bevor nach der n√§chsten Nachricht gesucht wird.
