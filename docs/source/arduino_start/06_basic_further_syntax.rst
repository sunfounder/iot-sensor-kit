.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

Skizzen-Schreibregeln
================================

Wenn du einen Freund bittest, das Licht f√ºr dich einzuschalten, kannst du einfach sagen: "Schalte das Licht ein" oder "Mach Licht, Kumpel." Dabei spielt der Tonfall keine Rolle.

Wenn du jedoch m√∂chtest, dass ein Arduino-Board etwas f√ºr dich tut, musst du die Programmschreibregeln von Arduino befolgen.

Dieses Kapitel enth√§lt die grundlegenden Regeln der Arduino-Sprache und hilft dir zu verstehen, wie du nat√ºrliche Sprache in Code √ºbersetzen kannst.

Nat√ºrlich erfordert dieser Prozess eine gewisse Eingew√∂hnungszeit und ist gerade f√ºr Anf√§nger am fehleranf√§lligsten. Wenn du also oft Fehler machst, ist das kein Problem, versuche es einfach noch ein paar Mal.


Semikolon ``;``
---------------

Genau wie im Briefverkehr, wo am Ende jedes Satzes ein Punkt steht, verlangt die Arduino-Sprache, dass du ``;`` verwendest, um das Board √ºber das Ende eines Befehls zu informieren.

Nehmen wir das bekannte Beispiel der "an Bord befindlichen LED-Blinkanzeige". Ein fehlerfreies Skript k√∂nnte so aussehen:

Beispiel:

.. code-block:: arduino

    void setup() {
        // F√ºge hier deinen Setup-Code ein, der einmal ausgef√ºhrt wird:
        pinMode(13, OUTPUT); 
    }

    void loop() {
        // F√ºge hier deinen Hauptcode ein, der wiederholt ausgef√ºhrt wird:
        digitalWrite(13, HIGH);
        delay(500);
        digitalWrite(13, LOW);
        delay(500);
    }

Als n√§chstes betrachten wir die folgenden beiden Skizzen und √ºberlegen, ob sie vom Arduino korrekt erkannt werden, bevor wir sie ausf√ºhren.

Skizze A:

.. code-block:: arduino
    :emphasize-lines: 8,9,10,11

    void setup() {
        // F√ºge hier deinen Setup-Code ein, der einmal ausgef√ºhrt wird:
        pinMode(13, OUTPUT); 
    }

    void loop() {
        // F√ºge hier deinen Hauptcode ein, der wiederholt ausgef√ºhrt wird:
        digitalWrite(13, HIGH)
        delay(500)
        digitalWrite(13, LOW)
        delay(500)
    }

Skizze B:

.. code-block:: arduino
    :emphasize-lines: 8,9,10,11,12,13,14,15,16

    void setup() {
        // F√ºge hier deinen Setup-Code ein, der einmal ausgef√ºhrt wird:
        pinMode(13, OUTPUT);
    }
    
    void loop() {
        // F√ºge hier deinen Hauptcode ein, der wiederholt ausgef√ºhrt wird:
        digitalWrite(13,
    HIGH);  delay
        (500
        );
        digitalWrite(13,
        
        LOW);
                delay(500)
        ;
    }

Das Ergebnis ist, dass **Skizze A** einen Fehler meldet und **Skizze B** ausgef√ºhrt wird.

* Die Fehler in **Skizze A** sind fehlende ``;`` und obwohl die Skizze normal aussieht, kann sie von Arduino nicht gelesen werden.
* **Skizze B** mag unleserlich erscheinen, aber Einr√ºckungen, Zeilenumbr√ºche und Leerzeichen in den Anweisungen sind f√ºr den Arduino-Compiler irrelevant. Daher sieht die Skizze f√ºr ihn genauso aus wie im Beispiel.

Bitte schreibe deinen Code jedoch nicht wie in **Skizze B**, da es in der Regel Menschen sind, die den Code schreiben und lesen. Erschwere dir also nicht unn√∂tig die Arbeit.


Geschweifte Klammern ``{}``
---------------------------

Geschweifte Klammern ``{}`` sind ein Hauptbestandteil der Arduino-Programmiersprache und m√ºssen immer paarweise vorkommen.
Eine g√§ngige Programmierrichtlinie besteht darin, direkt nach dem Tippen der √∂ffnenden geschweiften Klammer auch die schlie√üende geschweifte Klammer einzuf√ºgen und den Cursor dann zwischen die Klammern zu setzen, um die Anweisung einzuf√ºgen.


Kommentare ``//``
------------------

Kommentare sind die Teile einer Skizze, die der Compiler ignoriert. Sie dienen in der Regel dazu, anderen zu erkl√§ren, wie das Programm funktioniert.

Schreibt man zwei aufeinanderfolgende Schr√§gstriche in einer Codezeile, wird alles bis zum Ende der Zeile vom Compiler ignoriert.

Wenn wir eine neue Skizze erstellen, enth√§lt sie bereits zwei Kommentare. Entfernen wir diese, hat dies keinen Einfluss auf die Funktionsweise der Skizze.

.. code-block:: arduino
    :emphasize-lines: 2,7

    void setup() {
        // Setze hier deinen Initialisierungscode ein, der einmal ausgef√ºhrt wird:

    }

    void loop() {
        // Setze hier deinen Hauptcode ein, der st√§ndig wiederholt wird:

    }

Kommentare sind in der Programmierung sehr n√ºtzlich, und einige g√§ngige Anwendungsbeispiele sind nachfolgend aufgelistet.

* Anwendungsfall A: Erkl√§re dir oder anderen, was dieser Codeabschnitt macht.

.. code-block:: arduino

    void setup() {
        pinMode(13, OUTPUT); // Setze Pin 13 in den Ausgabemodus, er steuert die onboard LED
    }

    void loop() {
        digitalWrite(13, HIGH); // Aktiviere die onboard LED durch Setzen von Pin 13 auf HIGH
        delay(500); // Halte den Status f√ºr 500 ms
        digitalWrite(13, LOW); // Schalte die onboard LED aus
        delay(500); // Halte den Status f√ºr 500 ms
    }

* Anwendungsfall B: Tempor√§res Deaktivieren von Anweisungen (ohne sie zu l√∂schen), um sie bei Bedarf wieder zu aktivieren, ohne sie neu schreiben zu m√ºssen. Dies ist beim Debuggen von Code und bei der Fehlersuche sehr hilfreich.

.. code-block:: arduino
    :emphasize-lines: 3,4,5,6

    void setup() {
        pinMode(13, OUTPUT);
        // digitalWrite(13, HIGH);
        // delay(1000);
        // digitalWrite(13, LOW);
        // delay(1000);
    }

    void loop() {
        digitalWrite(13, HIGH);
        delay(200);
        digitalWrite(13, LOW);
        delay(200);
    }    

.. note:: 
    Verwenden Sie die Tastenkombination ``Strg+/``, um Ihren Code schnell zu kommentieren oder zu dekommentieren.

Kommentar ``/**/``
------------------

Gleichwertig zu ``//`` f√ºr Kommentare. Diese Art von Kommentar kann √ºber mehrere Zeilen gehen. Sobald der Compiler ``/*`` liest, ignoriert er alles, was darauf folgt, bis er ``*/`` trifft.



Example 1:

.. code-block:: arduino
    :emphasize-lines: 1,8,9,10,11

    /* Blink */

    void setup() {
        pinMode(13,OUTPUT); 
    }

    void loop() {
        /*
        The following code will blink the onboard LED
        You can modify the number in delay() to change the blinking frequency
        */
        digitalWrite(13,HIGH); 
        delay(500); 
        digitalWrite(13,LOW); 
        delay(500);
    }


``#define``
--------------

Dies ist ein n√ºtzliches Werkzeug in C++.

.. code-block:: arduino

    #define identifier Token-String

Der Compiler ersetzt beim Lesen automatisch den ``identifier`` durch den ``Token-String``, was meist zur Definition von Konstanten verwendet wird.

Hier ein Beispiel f√ºr eine Skizze, die `#define` verwendet, um die Lesbarkeit des Codes zu erh√∂hen.

.. code-block:: arduino
    :emphasize-lines: 1,2

    #define ONBOARD_LED 13
    #define VERZOEGERUNGSZEIT 500

    void setup() {
        pinMode(ONBOARD_LED, OUTPUT); 
    }

    void loop() {
        digitalWrite(ONBOARD_LED, HIGH); 
        delay(VERZOEGERUNGSZEIT); 
        digitalWrite(ONBOARD_LED, LOW); 
        delay(VERZOEGERUNGSZEIT);
    }

Aus Sicht des Compilers sieht der Code eigentlich so aus:

.. code-block:: arduino

    void setup() {
        pinMode(13, OUTPUT); 
    }

    void loop() {
        digitalWrite(13, HIGH); 
        delay(500); 
        digitalWrite(13, LOW); 
        delay(500);
    }

Wie man sehen kann, wird der ``Bezeichner`` ersetzt und existiert nicht im Programm. Daher gibt es einige Vorsichtsma√ünahmen bei der Verwendung.

1. Ein ``Token-String`` kann nur manuell ge√§ndert und nicht durch Rechenoperationen im Programm in andere Werte umgewandelt werden.

2. Vermeiden Sie die Verwendung von Symbolen wie ``;``. Zum Beispiel:

.. code-block:: arduino
    :emphasize-lines: 1

    #define ONBOARD_LED 13;

    void setup() {
        pinMode(ONBOARD_LED, OUTPUT); 
    }

    void loop() {
        digitalWrite(ONBOARD_LED, HIGH); 
    }

Der Compiler wird es wie folgt interpretieren, was zu einem Fehler f√ºhren wird:

.. code-block:: arduino
    :emphasize-lines: 2,6

    void setup() {
        pinMode(13;, OUTPUT); 
    }

    void loop() {
        digitalWrite(13;, HIGH); 
    }

.. note:: 
    Eine Namenskonvention f√ºr ``#define`` ist es, den ``identifier`` zu gro√ü zu schreiben, um Verwechslungen mit Variablen zu vermeiden.
